"""Enhance ApiKey model with usage stats and permissions

Revision ID: a9b5741ecf06
Revises:
Create Date: 2025-10-14 20:50:04.900482

"""

import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision = "a9b5741ecf06"
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "api_keys",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("key", sa.String(length=128), nullable=False),
        sa.Column("name", sa.String(length=100), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("is_active", sa.Boolean(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("last_used", sa.DateTime(), nullable=True),
        sa.Column("usage_count", sa.Integer(), nullable=True),
        sa.Column("rate_limit", sa.Integer(), nullable=True),
        sa.Column("allowed_endpoints", sa.JSON(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    with op.batch_alter_table("api_keys", schema=None) as batch_op:
        batch_op.create_index(batch_op.f("ix_api_keys_key"), ["key"], unique=True)

    op.create_table(
        "document_counters",
        sa.Column("period", sa.String(length=10), nullable=False),
        sa.Column("last_sequence_number", sa.Integer(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint("period"),
    )
    with op.batch_alter_table("document_counters", schema=None) as batch_op:
        batch_op.create_index("idx_counter_updated", ["updated_at"], unique=False)

    op.create_table(
        "fingerprints",
        sa.Column("fingerprint_hash", sa.String(length=64), nullable=False),
        sa.Column("user_agent", sa.Text(), nullable=True),
        sa.Column("platform", sa.String(length=100), nullable=True),
        sa.Column("webgl_renderer", sa.String(length=200), nullable=True),
        sa.Column("first_seen", sa.DateTime(), nullable=False),
        sa.Column("last_seen", sa.DateTime(), nullable=False),
        sa.PrimaryKeyConstraint("fingerprint_hash"),
    )
    with op.batch_alter_table("fingerprints", schema=None) as batch_op:
        batch_op.create_index("idx_fingerprint_last_seen", ["last_seen"], unique=False)

    op.create_table(
        "users",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("lastname", sa.String(length=100), nullable=False),
        sa.Column("firstname", sa.String(length=100), nullable=False),
        sa.Column("middlename", sa.String(length=100), nullable=True),
        sa.Column("position", sa.String(length=200), nullable=True),
        sa.Column("persistent_id", sa.String(length=255), nullable=True),
        sa.Column("email", sa.String(length=120), nullable=True),
        sa.Column("password_hash", sa.String(length=256), nullable=True),
        sa.Column("is_admin", sa.Boolean(), nullable=True),
        sa.Column("is_active", sa.Boolean(), nullable=True),
        sa.Column("last_login", sa.DateTime(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    with op.batch_alter_table("users", schema=None) as batch_op:
        batch_op.create_index(batch_op.f("ix_users_email"), ["email"], unique=True)
        batch_op.create_index(
            batch_op.f("ix_users_persistent_id"), ["persistent_id"], unique=True
        )

    op.create_table(
        "result_metadata",
        sa.Column("session_id", sa.String(length=128), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=True),
        sa.Column("fingerprint_hash", sa.String(length=64), nullable=True),
        sa.Column("test_type", sa.String(length=50), nullable=True),
        sa.Column("score", sa.Integer(), nullable=True),
        sa.Column("start_time", sa.DateTime(), nullable=True),
        sa.Column("end_time", sa.DateTime(), nullable=True),
        sa.Column("raw_data", sa.JSON(), nullable=True),
        sa.Column("document_number", sa.String(length=20), nullable=True),
        sa.Column("client_ip", sa.String(length=45), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["fingerprint_hash"],
            ["fingerprints.fingerprint_hash"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("session_id"),
        sa.UniqueConstraint("document_number"),
    )
    with op.batch_alter_table("result_metadata", schema=None) as batch_op:
        batch_op.create_index("idx_result_created", ["created_at"], unique=False)
        batch_op.create_index(
            "idx_result_user_score", ["user_id", "score"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_result_metadata_start_time"), ["start_time"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_result_metadata_test_type"), ["test_type"], unique=False
        )

    op.create_table(
        "certificates",
        sa.Column("document_number", sa.String(length=20), nullable=False),
        sa.Column("user_fullname", sa.String(length=300), nullable=False),
        sa.Column("user_position", sa.String(length=200), nullable=False),
        sa.Column("test_type", sa.String(length=50), nullable=False),
        sa.Column("issue_date", sa.DateTime(), nullable=False),
        sa.Column("score_percentage", sa.Integer(), nullable=False),
        sa.Column("session_id", sa.String(length=128), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["session_id"],
            ["result_metadata.session_id"],
        ),
        sa.PrimaryKeyConstraint("document_number"),
        sa.UniqueConstraint("session_id"),
    )
    with op.batch_alter_table("certificates", schema=None) as batch_op:
        batch_op.create_index("idx_cert_issue_date", ["issue_date"], unique=False)
        batch_op.create_index("idx_cert_user", ["user_fullname"], unique=False)

    op.create_table(
        "proctoring_events",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("session_id", sa.String(length=128), nullable=False),
        sa.Column("event_type", sa.String(length=64), nullable=False),
        sa.Column("event_timestamp", sa.DateTime(), nullable=False),
        sa.Column("details", sa.JSON(), nullable=True),
        sa.Column("persistent_id", sa.String(length=255), nullable=True),
        sa.Column("client_ip", sa.String(length=45), nullable=True),
        sa.Column("page", sa.String(length=100), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["session_id"],
            ["result_metadata.session_id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    with op.batch_alter_table("proctoring_events", schema=None) as batch_op:
        batch_op.create_index(
            "idx_event_page_type", ["page", "event_type"], unique=False
        )
        batch_op.create_index(
            "idx_event_session_type", ["session_id", "event_type"], unique=False
        )
        batch_op.create_index("idx_event_timestamp", ["event_timestamp"], unique=False)
        batch_op.create_index(
            batch_op.f("ix_proctoring_events_event_timestamp"),
            ["event_timestamp"],
            unique=False,
        )
        batch_op.create_index(
            batch_op.f("ix_proctoring_events_event_type"), ["event_type"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_proctoring_events_page"), ["page"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_proctoring_events_persistent_id"),
            ["persistent_id"],
            unique=False,
        )
        batch_op.create_index(
            batch_op.f("ix_proctoring_events_session_id"), ["session_id"], unique=False
        )

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("proctoring_events", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_proctoring_events_session_id"))
        batch_op.drop_index(batch_op.f("ix_proctoring_events_persistent_id"))
        batch_op.drop_index(batch_op.f("ix_proctoring_events_page"))
        batch_op.drop_index(batch_op.f("ix_proctoring_events_event_type"))
        batch_op.drop_index(batch_op.f("ix_proctoring_events_event_timestamp"))
        batch_op.drop_index("idx_event_timestamp")
        batch_op.drop_index("idx_event_session_type")
        batch_op.drop_index("idx_event_page_type")

    op.drop_table("proctoring_events")
    with op.batch_alter_table("certificates", schema=None) as batch_op:
        batch_op.drop_index("idx_cert_user")
        batch_op.drop_index("idx_cert_issue_date")

    op.drop_table("certificates")
    with op.batch_alter_table("result_metadata", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_result_metadata_test_type"))
        batch_op.drop_index(batch_op.f("ix_result_metadata_start_time"))
        batch_op.drop_index("idx_result_user_score")
        batch_op.drop_index("idx_result_created")

    op.drop_table("result_metadata")
    with op.batch_alter_table("users", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_users_persistent_id"))
        batch_op.drop_index(batch_op.f("ix_users_email"))

    op.drop_table("users")
    with op.batch_alter_table("fingerprints", schema=None) as batch_op:
        batch_op.drop_index("idx_fingerprint_last_seen")

    op.drop_table("fingerprints")
    with op.batch_alter_table("document_counters", schema=None) as batch_op:
        batch_op.drop_index("idx_counter_updated")

    op.drop_table("document_counters")
    with op.batch_alter_table("api_keys", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_api_keys_key"))

    op.drop_table("api_keys")
    # ### end Alembic commands ###
